{"ast":null,"code":"var _jsxFileName = \"/Users/vincentbennis/Desktop/G27/codeclan_work/projects/daFighter/java-project-da-fighters-frontend/src/containers/DaContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport DaList from '../components/DaList';\nimport DaForm from '../components/DaForm';\nimport Request from '../helpers/request';\nimport FightScreen from '../components/FightScreen';\nimport Home from '../components/Home';\nimport ResultScreen from '../components/ResultScreen';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst DaContainer = () => {\n  _s();\n\n  const [das, setDas] = useState([]);\n  const [playerDa, setPlayerDa] = useState(null);\n  const [computerDa, setComputerDa] = useState(null);\n  const [gameFinished, setGameFinished] = useState(false);\n\n  const requestAll = function () {\n    const request = new Request();\n    const dasPromise = request.get('/das');\n    Promise.all([dasPromise]).then(data => {\n      setDas(data[0]);\n    });\n  };\n\n  useEffect(() => {\n    requestAll();\n  }, []);\n  useEffect(() => {\n    selectComputerDa();\n  }, [playerDa]);\n\n  const handlePost = function (da) {\n    const request = new Request();\n    request.post(\"/api/das\", da).then(() => window.location = '/das');\n  };\n\n  const onDaClicked = function (da) {\n    setPlayerDa(da);\n\n    /*#__PURE__*/\n    _jsxDEV(Route, {\n      path: \"/result\",\n      render: () => {\n        return /*#__PURE__*/_jsxDEV(ResultScreen, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 14\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }, this);\n  };\n\n  const onGameFinished = function () {\n    setGameFinished(true);\n  };\n\n  const selectComputerDa = function () {\n    const copiedDas = [...das];\n\n    for (var i = 0; i < copiedDas.length; i++) {\n      if (copiedDas[i] === playerDa) {\n        copiedDas.splice(i, 1);\n      }\n    }\n\n    const randomIndex = Math.floor(Math.random() * copiedDas.length);\n    const randomDa = copiedDas[randomIndex];\n    setComputerDa(randomDa);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/select\",\n        render: () => {\n          return /*#__PURE__*/_jsxDEV(DaList, {\n            das: das,\n            onDaClicked: onDaClicked\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 18\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/fight\",\n        render: () => {\n          return /*#__PURE__*/_jsxDEV(FightScreen, {\n            playerDa: playerDa,\n            computerDa: computerDa,\n            OnGameFinished: onGameFinished\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 18\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(DaContainer, \"MLJgJCZHDlqlDtvxLC4R7micMfU=\");\n\n_c = DaContainer;\nexport default DaContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"DaContainer\");","map":{"version":3,"sources":["/Users/vincentbennis/Desktop/G27/codeclan_work/projects/daFighter/java-project-da-fighters-frontend/src/containers/DaContainer.js"],"names":["React","useState","useEffect","Route","Switch","DaList","DaForm","Request","FightScreen","Home","ResultScreen","DaContainer","das","setDas","playerDa","setPlayerDa","computerDa","setComputerDa","gameFinished","setGameFinished","requestAll","request","dasPromise","get","Promise","all","then","data","selectComputerDa","handlePost","da","post","window","location","onDaClicked","onGameFinished","copiedDas","i","length","splice","randomIndex","Math","floor","random","randomDa"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport DaList from '../components/DaList';\nimport DaForm from '../components/DaForm';\nimport Request from '../helpers/request';\nimport FightScreen from '../components/FightScreen';\nimport Home from '../components/Home';\nimport ResultScreen from '../components/ResultScreen';\n\n\nconst DaContainer = () => {\n  const [das, setDas] = useState([]);\n  const [playerDa, setPlayerDa] = useState(null)\n  const [computerDa, setComputerDa] = useState(null)\n  const [gameFinished, setGameFinished] = useState(false);\n\n  const requestAll = function () {\n    const request = new Request();\n    const dasPromise = request.get('/das')\n\n    Promise.all([dasPromise])\n      .then((data) => {\n        setDas(data[0]);\n      })\n  }\n\n  useEffect(() => {\n    requestAll()\n  }, [])\n\n  useEffect(() => {\n    selectComputerDa()\n  }, [playerDa])\n\n\n  const handlePost = function (da) {\n    const request = new Request();\n    request.post(\"/api/das\", da)\n      .then(() => window.location = '/das')\n  }\n\n  const onDaClicked = function (da) {\n    setPlayerDa(da);\n    <Route path=\"/result\" render={() => {\n      return <ResultScreen />\n    }} />\n  }\n\n  const onGameFinished = function () {\n    setGameFinished(true)\n  }\n\n  const selectComputerDa = function () {\n    const copiedDas = [...das]\n    for (var i = 0; i < copiedDas.length; i++) {\n      if (copiedDas[i] === playerDa) {\n        copiedDas.splice(i, 1);\n      }\n    }\n    const randomIndex = Math.floor(Math.random() * copiedDas.length);\n    const randomDa = copiedDas[randomIndex];\n    setComputerDa(randomDa)\n  }\n\n  return (\n    <>\n      <Switch>\n\n        {/* <Route exact path=\"/das/new\" render={() => {\n          return <DaForm handlePost={handlePost} />\n        }} /> */}\n        <Route path=\"/select\" render={() => {\n          return <DaList das={das} onDaClicked={onDaClicked} />\n        }} />\n        <Route path=\"/fight\" render={() => {\n          return <FightScreen playerDa={playerDa} computerDa={computerDa} OnGameFinished={onGameFinished} />\n        }} />\n        {/* <Route path=\"/result\" render={() => {\n          return <ResultScreen playerDa={playerDa} computerDa={computerDa} />\n        }} /> */}\n      </Switch>\n    </>\n  )\n}\n\nexport default DaContainer;"]},"metadata":{},"sourceType":"module"}