[{"/Users/morven/Desktop/java-capstone-project/javaProject_da_fighter_clientSide/java-project-da-fighters-frontend/src/index.js":"1","/Users/morven/Desktop/java-capstone-project/javaProject_da_fighter_clientSide/java-project-da-fighters-frontend/src/App.js":"2","/Users/morven/Desktop/java-capstone-project/javaProject_da_fighter_clientSide/java-project-da-fighters-frontend/src/reportWebVitals.js":"3","/Users/morven/Desktop/java-capstone-project/javaProject_da_fighter_clientSide/java-project-da-fighters-frontend/src/containers/MainContainer.js":"4","/Users/morven/Desktop/java-capstone-project/javaProject_da_fighter_clientSide/java-project-da-fighters-frontend/src/containers/DaContainer.js":"5","/Users/morven/Desktop/java-capstone-project/javaProject_da_fighter_clientSide/java-project-da-fighters-frontend/src/components/Home.js":"6","/Users/morven/Desktop/java-capstone-project/javaProject_da_fighter_clientSide/java-project-da-fighters-frontend/src/components/DaList.js":"7","/Users/morven/Desktop/java-capstone-project/javaProject_da_fighter_clientSide/java-project-da-fighters-frontend/src/components/DaForm.js":"8","/Users/morven/Desktop/java-capstone-project/javaProject_da_fighter_clientSide/java-project-da-fighters-frontend/src/components/FightScreen.js":"9","/Users/morven/Desktop/java-capstone-project/javaProject_da_fighter_clientSide/java-project-da-fighters-frontend/src/helpers/request.js":"10","/Users/morven/Desktop/java-capstone-project/javaProject_da_fighter_clientSide/java-project-da-fighters-frontend/src/components/Da.js":"11"},{"size":500,"mtime":1638287733821,"results":"12","hashOfConfig":"13"},{"size":200,"mtime":1638287805923,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1638287733821,"results":"15","hashOfConfig":"13"},{"size":571,"mtime":1638288636044,"results":"16","hashOfConfig":"13"},{"size":2005,"mtime":1638288599938,"results":"17","hashOfConfig":"13"},{"size":581,"mtime":1638288603645,"results":"18","hashOfConfig":"13"},{"size":432,"mtime":1638287805923,"results":"19","hashOfConfig":"13"},{"size":2150,"mtime":1638287805923,"results":"20","hashOfConfig":"13"},{"size":11703,"mtime":1638287805923,"results":"21","hashOfConfig":"13"},{"size":592,"mtime":1638287805924,"results":"22","hashOfConfig":"13"},{"size":235,"mtime":1638287805923,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"oiae3h",{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/morven/Desktop/java-capstone-project/javaProject_da_fighter_clientSide/java-project-da-fighters-frontend/src/index.js",[],"/Users/morven/Desktop/java-capstone-project/javaProject_da_fighter_clientSide/java-project-da-fighters-frontend/src/App.js",[],"/Users/morven/Desktop/java-capstone-project/javaProject_da_fighter_clientSide/java-project-da-fighters-frontend/src/reportWebVitals.js",[],"/Users/morven/Desktop/java-capstone-project/javaProject_da_fighter_clientSide/java-project-da-fighters-frontend/src/containers/MainContainer.js",[],"/Users/morven/Desktop/java-capstone-project/javaProject_da_fighter_clientSide/java-project-da-fighters-frontend/src/containers/DaContainer.js",["49","50","51","52"],"import React, { useState, useEffect } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport DaList from '../components/DaList';\nimport DaForm from '../components/DaForm';\nimport Request from '../helpers/request';\nimport FightScreen from '../components/FightScreen';\nimport Home from '../components/Home';\n\n\nconst DaContainer = () => {\n  const [das, setDas] = useState([]);\n  const [playerDa, setPlayerDa] = useState(null)\n  const [computerDa, setComputerDa] = useState(null)\n\n  const requestAll = function () {\n    const request = new Request();\n    const dasPromise = request.get('/das')\n\n    Promise.all([dasPromise])\n      .then((data) => {\n        setDas(data[0]);\n      })\n  }\n\n  useEffect(() => {\n    requestAll()\n  }, [])\n\n  useEffect(() => {\n    selectComputerDa()\n  }, [playerDa])\n\n\n  const handlePost = function (da) {\n    const request = new Request();\n    request.post(\"/api/das\", da)\n      .then(() => window.location = '/das')\n  }\n\n  const onDaClicked = function (da) {\n    setPlayerDa(da)\n  }\n\n  const selectComputerDa = function () {\n    const copiedDas = [...das]\n    for (var i = 0; i < copiedDas.length; i++) {\n      if (copiedDas[i] === playerDa) {\n        copiedDas.splice(i, 1);\n      }\n    }\n    const randomIndex = Math.floor(Math.random() * copiedDas.length);\n    const randomDa = copiedDas[randomIndex];\n    setComputerDa(randomDa)\n  }\n\n  return (\n    <>\n      <Switch>\n\n        {/* <Route exact path=\"/das/new\" render={() => {\n          return <DaForm handlePost={handlePost} />\n        }} /> */}\n        <Route path=\"/select\" render={() => {\n          return <DaList das={das} onDaClicked={onDaClicked} />\n        }} />\n        <Route path=\"/fight\" render={() => {\n          return <FightScreen playerDa={playerDa} computerDa={computerDa} />\n        }} />\n        {/* <Route path=\"/result\" render={() => {\n          return <ResultScreen playerDa={playerDa} computerDa={computerDa} />\n        }} /> */}\n      </Switch>\n    </>\n  )\n}\n\nexport default DaContainer;","/Users/morven/Desktop/java-capstone-project/javaProject_da_fighter_clientSide/java-project-da-fighters-frontend/src/components/Home.js",["53","54"],"import React from \"react\";\nimport ReactAudioPlayer from \"react-audio-player\";\n\n\n    const audio = new Audio('public/home_page.mp3');\n    audio.play();\n\n\nconst Home = () => {\n    return(\t\t\n        <>\n    <img className=\"main_logo\" height=\"600\" src={`${process.env.PUBLIC_URL}/logo.gif`}  />\n      <div>\n        <a href=\"/select\">\n        <img className=\"press_start\" height=\"100\" src={`${process.env.PUBLIC_URL}/press_start.gif`}  />\n        </a>\n      </div>\n      <ReactAudioPlayer className=\"audio_player\" src= \"intro.mp3\" autoplay controls/>\n\n</>\n\n    )}\n\n\n\nexport default Home;","/Users/morven/Desktop/java-capstone-project/javaProject_da_fighter_clientSide/java-project-da-fighters-frontend/src/components/DaList.js",[],"/Users/morven/Desktop/java-capstone-project/javaProject_da_fighter_clientSide/java-project-da-fighters-frontend/src/components/DaForm.js",[],"/Users/morven/Desktop/java-capstone-project/javaProject_da_fighter_clientSide/java-project-da-fighters-frontend/src/components/FightScreen.js",["55","56","57"],"import React, { useEffect, useRef, useState } from 'react';\nimport CountUp from 'react-countup';\n\nconst FightScreen = ({ playerDa, computerDa }) => {\n\n    const [computerHealth, setComputerHealth] = useState(100);\n    const [previousComputerHealth, setPreviousComputerHealth] = useState(0);\n    const [playerHealth, setPlayerHealth] = useState(100);\n    const [previousPlayerHealth, setPreviousPlayerHealth] = useState(0);\n    const [computerSpecialUsed, setComputerSpecialUsed] = useState(false);\n    const [playerSpecialUsed, setPlayerSpecialUsed] = useState(false);\n    const [gameFinished, setGameFinished] = useState(false);\n\n    useEffect(() => {\n        if (computerHealth <= 0 || playerHealth <= 0) {\n            setGameFinished(true);\n            console.log(\"this has been hit\");\n        }\n        console.log(\"me should finish ? : \" + gameFinished);\n    }, [computerHealth, playerHealth])\n\n    const getRandomNumber = function (min, max) {\n        return Math.floor(Math.random() * ((max - min) + 1) + min);\n    }\n\n    const handleAttack1Click = function () {\n        let damage = 0;\n        if (playerDa.daType === \"BUFFDA\") {\n            damage = getRandomNumber(18, 30)\n        } else if (playerDa.daType === \"AVERAGEDA\") {\n            damage = getRandomNumber(23, 25)\n        } else {\n            damage = getRandomNumber(18, 25)\n        }\n        // const health = computerHealth - damage;\n        setPreviousComputerHealth(computerHealth)\n        setComputerHealth(computerHealth => computerHealth - damage)\n        console.log(\"player hit computer for : \" + damage);\n        // checkIfGameFinished()\n        setTimeout(function () {\n            computerTurn()\n        }, 2000)\n    }\n\n\n    const handleAttack2Click = function () {\n        let damage = getRandomNumber(10, 35);\n        // const health = computerHealth - damage;\n        setPreviousComputerHealth(computerHealth)\n        setComputerHealth(computerHealth => computerHealth - damage)\n        console.log(\"player hit computer for : \" + damage);\n        // checkIfGameFinished();\n        setTimeout(function () {\n            computerTurn()\n        }, 2000)\n    }\n\n\n    const handleHealClick = function () {\n        let heal = 0;\n        if (playerDa.daType === \"SOFTDA\") {\n            heal = getRandomNumber(23, 25)\n        } else {\n            heal = getRandomNumber(18, 25)\n        }\n        if ((playerHealth + heal) >= 100) {\n            setPreviousPlayerHealth(playerHealth)\n            setPlayerHealth(playerhealth => 100)\n        } else if (playerHealth <= 30) {\n            heal = getRandomNumber(24, 25)\n            // const health = playerHealth + heal;\n            setPreviousPlayerHealth(playerHealth)\n            setPlayerHealth(playerHealth => playerHealth + heal)\n        } else {\n            const health = playerHealth + heal;\n            setPreviousPlayerHealth(playerHealth)\n            setPlayerHealth(playerHealth => playerHealth + heal)\n        }\n        console.log(\"player healed for : \" + heal);\n        // checkIfGameFinished();\n        setTimeout(function () {\n            computerTurn()\n        }, 2000)\n    }\n\n    const handleSpecialClick = function () {\n        if (playerSpecialUsed === false) {\n            let opponentDamage = 45;\n            let selfDamage = 25;\n            const specialOutcome = [opponentDamage, opponentDamage, selfDamage]\n            const specialNumber = Math.floor(Math.random() * 3);\n            if (specialOutcome[specialNumber] === opponentDamage) {\n                // const health = computerHealth - opponentDamage;\n                setPreviousComputerHealth(computerHealth)\n                setComputerHealth(computerHealth => computerHealth - opponentDamage);\n                setPlayerSpecialUsed(true);\n                console.log(\"player hit computer for : \" + opponentDamage);\n                // checkIfGameFinished();\n                setTimeout(function () {\n                    computerTurn()\n                }, 2000)\n            } else if (specialOutcome[specialNumber] === selfDamage) {\n                // const health = playerHealth - selfDamage;\n                setPreviousPlayerHealth(playerHealth)\n                setPlayerHealth(playerHealth => playerHealth - selfDamage);\n                setPlayerSpecialUsed(true);\n                console.log(\"player hit themselves for : \" + selfDamage);\n                // checkIfGameFinished();\n                setTimeout(function () {\n                    computerTurn()\n                }, 2000)\n            }\n        } else {\n            return null;\n        }\n    }\n\n    const computerTurn = function () {\n\n        const Attack1 = function () {\n            let damage = 0;\n            if (computerDa.daType === \"BUFFDA\") {\n                damage = getRandomNumber(18, 30)\n            } else if (computerDa.daType === \"AVERAGEDA\") {\n                damage = getRandomNumber(23, 25)\n            } else {\n                damage = getRandomNumber(18, 25)\n            }\n            // const health = playerHealth - damage;\n            setPreviousPlayerHealth(playerHealth)\n            setPlayerHealth(playerHealth => playerHealth - damage)\n            console.log(\"computer hit player for : \" + damage);\n            // checkIfGameFinished();\n        }\n        const Attack2 = function () {\n            let damage = getRandomNumber(10, 35);\n            // const health = playerHealth - damage;\n            setPreviousPlayerHealth(playerHealth)\n            setPlayerHealth(playerHealth => playerHealth - damage);\n            console.log(\"computer hit player for : \" + damage);\n            // checkIfGameFinished();\n        }\n        const Heal = function () {\n            let heal = 0;\n            if (computerDa.daType === \"SOFTDA\") {\n                heal = getRandomNumber(23, 25)\n            } else {\n                heal = getRandomNumber(18, 25)\n            }\n            if ((computerHealth + heal) >= 100) {\n                setPreviousComputerHealth(computerHealth)\n                setComputerHealth(computerHealth => 100);\n            } else if (computerHealth <= 30) {\n                heal = getRandomNumber(24, 25)\n                // const health = computerHealth + heal;\n                setPreviousComputerHealth(computerHealth)\n                setComputerHealth(computerHealth => computerHealth + heal)\n            } else {\n                // const health = computerHealth + heal;\n                setPreviousComputerHealth(computerHealth)\n                setComputerHealth(computerHealth => computerHealth + heal)\n            }\n            console.log(\"computer healed for : \" + heal);\n            // checkIfGameFinished();\n        }\n        const Special = function () {\n            let opponentDamage = 45;\n            let selfDamage = 25;\n            const specialOutcome = [opponentDamage, opponentDamage, selfDamage]\n            const specialNumber = Math.floor(Math.random() * 3);\n            if (specialOutcome[specialNumber] === opponentDamage) {\n                // const health = playerHealth - opponentDamage;\n                setPreviousPlayerHealth(playerHealth)\n                setPlayerHealth(playerHealth => playerHealth - opponentDamage);\n                setComputerSpecialUsed(true);\n                console.log(\"computer hit player for : \" + opponentDamage);\n                // checkIfGameFinished();\n            } else if (specialOutcome[specialNumber] === selfDamage) {\n                // const health = computerHealth - selfDamage;\n                setPreviousComputerHealth(computerHealth)\n                setComputerHealth(computerHealth => computerHealth - selfDamage);\n                setComputerSpecialUsed(true);\n                console.log(\"computer hit themselves for : \" + selfDamage);\n                // checkIfGameFinished();\n            }\n        }\n        if (computerHealth >= 80) {\n            if (computerSpecialUsed === false) {\n                const randomMove = [Attack1, Attack2, Special]\n                const randomNumber = Math.floor(Math.random() * 3);\n                setTimeout(function () {\n                    randomMove[randomNumber]()\n                }, 1000)\n            } else {\n                const randomMove = [Attack1, Attack2]\n                const randomNumber = Math.floor(Math.random() * 2);\n                setTimeout(function () {\n                    randomMove[randomNumber]()\n                }, 1000)\n            }\n        } else if (computerHealth >= 60) {\n            if (computerSpecialUsed === false) {\n                const randomMove = [Attack1, Attack2, Heal, Special]\n                const randomNumber = Math.floor(Math.random() * 4);\n                setTimeout(function () {\n                    randomMove[randomNumber]()\n                }, 1000)\n            } else {\n                const randomMove = [Attack1, Attack2, Heal]\n                const randomNumber = Math.floor(Math.random() * 3);\n                setTimeout(function () {\n                    randomMove[randomNumber]()\n                }, 1000)\n            }\n        } else if (computerHealth >= 40) {\n            if (computerSpecialUsed === false) {\n                const randomMove = [Attack1, Attack2, Heal, Heal, Special]\n                const randomNumber = Math.floor(Math.random() * 5);\n                setTimeout(function () {\n                    randomMove[randomNumber]()\n                }, 1000)\n            } else {\n                const randomMove = [Attack1, Attack2, Heal, Heal]\n                const randomNumber = Math.floor(Math.random() * 4);\n                setTimeout(function () {\n                    randomMove[randomNumber]()\n                }, 1000)\n            }\n        } else if (computerHealth <= 30) {\n            if (computerSpecialUsed === false) {\n                const randomMove = [Attack1, Attack2, Heal, Heal, Heal, Heal, Special]\n                const randomNumber = Math.floor(Math.random() * 7);\n                setTimeout(function () {\n                    randomMove[randomNumber]()\n                }, 1000)\n            } else {\n                const randomMove = [Attack1, Attack2, Heal, Heal, Heal, Heal]\n                const randomNumber = Math.floor(Math.random() * 6);\n                setTimeout(function () {\n                    randomMove[randomNumber]()\n                }, 1000)\n            }\n        }\n    };\n\n    return (\n        <>\n            <div>\n                {playerDa.name}\n                <ul>\n                    <li><button onClick={handleAttack1Click}>{playerDa.attackOneName}</button></li>\n                    <li><button onClick={handleAttack2Click}>{playerDa.attackTwoName}</button></li>\n                    <li><button onClick={handleHealClick}>{playerDa.healName}</button></li>\n                    <li><button onClick={handleSpecialClick}>{playerDa.specialName}</button></li>\n                    <li><CountUp\n                        start={previousPlayerHealth}\n                        end={playerHealth}\n                        duration=\"1\"\n                    />\n                    </li>\n                </ul>\n            </div>\n            <div>\n                {computerDa.name}\n                <ul>\n                    <li><button>{computerDa.attackOneName}</button></li>\n                    <li><button>{computerDa.attackTwoName}</button></li>\n                    <li><button>{computerDa.healName}</button></li>\n                    <li><button>{computerDa.specialName}</button></li>\n                    <li><CountUp\n                        start={previousComputerHealth}\n                        end={computerHealth}\n                        duration=\"1\"\n                    />\n                    </li>\n                </ul>\n            </div>\n        </>\n    )\n\n}\n\nexport default FightScreen;","/Users/morven/Desktop/java-capstone-project/javaProject_da_fighter_clientSide/java-project-da-fighters-frontend/src/helpers/request.js",[],"/Users/morven/Desktop/java-capstone-project/javaProject_da_fighter_clientSide/java-project-da-fighters-frontend/src/components/Da.js",[],{"ruleId":"58","severity":1,"message":"59","line":4,"column":8,"nodeType":"60","messageId":"61","endLine":4,"endColumn":14},{"ruleId":"58","severity":1,"message":"62","line":7,"column":8,"nodeType":"60","messageId":"61","endLine":7,"endColumn":12},{"ruleId":"63","severity":1,"message":"64","line":31,"column":6,"nodeType":"65","endLine":31,"endColumn":16,"suggestions":"66"},{"ruleId":"58","severity":1,"message":"67","line":34,"column":9,"nodeType":"60","messageId":"61","endLine":34,"endColumn":19},{"ruleId":"68","severity":1,"message":"69","line":12,"column":5,"nodeType":"70","endLine":12,"endColumn":91},{"ruleId":"68","severity":1,"message":"69","line":15,"column":9,"nodeType":"70","endLine":15,"endColumn":104},{"ruleId":"58","severity":1,"message":"71","line":1,"column":28,"nodeType":"60","messageId":"61","endLine":1,"endColumn":34},{"ruleId":"63","severity":1,"message":"72","line":20,"column":8,"nodeType":"65","endLine":20,"endColumn":38,"suggestions":"73"},{"ruleId":"58","severity":1,"message":"74","line":75,"column":19,"nodeType":"60","messageId":"61","endLine":75,"endColumn":25},"no-unused-vars","'DaForm' is defined but never used.","Identifier","unusedVar","'Home' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'selectComputerDa'. Either include it or remove the dependency array.","ArrayExpression",["75"],"'handlePost' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useRef' is defined but never used.","React Hook useEffect has a missing dependency: 'gameFinished'. Either include it or remove the dependency array.",["76"],"'health' is assigned a value but never used.",{"desc":"77","fix":"78"},{"desc":"79","fix":"80"},"Update the dependencies array to be: [playerDa, selectComputerDa]",{"range":"81","text":"82"},"Update the dependencies array to be: [computerHealth, gameFinished, playerHealth]",{"range":"83","text":"84"},[795,805],"[playerDa, selectComputerDa]",[868,898],"[computerHealth, gameFinished, playerHealth]"]