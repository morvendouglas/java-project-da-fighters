[{"/Users/jordanmckenna/Documents/GitHub/java-project-da-fighters-frontend/src/index.js":"1","/Users/jordanmckenna/Documents/GitHub/java-project-da-fighters-frontend/src/reportWebVitals.js":"2","/Users/jordanmckenna/Documents/GitHub/java-project-da-fighters-frontend/src/App.js":"3","/Users/jordanmckenna/Documents/GitHub/java-project-da-fighters-frontend/src/containers/MainContainer.js":"4","/Users/jordanmckenna/Documents/GitHub/java-project-da-fighters-frontend/src/containers/DaContainer.js":"5","/Users/jordanmckenna/Documents/GitHub/java-project-da-fighters-frontend/src/components/Home.js":"6","/Users/jordanmckenna/Documents/GitHub/java-project-da-fighters-frontend/src/components/DaForm.js":"7","/Users/jordanmckenna/Documents/GitHub/java-project-da-fighters-frontend/src/components/DaList.js":"8","/Users/jordanmckenna/Documents/GitHub/java-project-da-fighters-frontend/src/helpers/request.js":"9","/Users/jordanmckenna/Documents/GitHub/java-project-da-fighters-frontend/src/components/ResultScreen.js":"10","/Users/jordanmckenna/Documents/GitHub/java-project-da-fighters-frontend/src/components/FinishScreen.js":"11","/Users/jordanmckenna/Documents/GitHub/java-project-da-fighters-frontend/src/components/FightScreen.js":"12","/Users/jordanmckenna/Documents/GitHub/java-project-da-fighters-frontend/src/components/Da.js":"13"},{"size":500,"mtime":1638454929506,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1638454929506,"results":"16","hashOfConfig":"15"},{"size":200,"mtime":1638454985023,"results":"17","hashOfConfig":"15"},{"size":689,"mtime":1638733016220,"results":"18","hashOfConfig":"15"},{"size":3373,"mtime":1638786346572,"results":"19","hashOfConfig":"15"},{"size":581,"mtime":1638454985025,"results":"20","hashOfConfig":"15"},{"size":2150,"mtime":1638454985024,"results":"21","hashOfConfig":"15"},{"size":462,"mtime":1638786584551,"results":"22","hashOfConfig":"15"},{"size":592,"mtime":1638454985027,"results":"23","hashOfConfig":"15"},{"size":2120,"mtime":1638733016217,"results":"24","hashOfConfig":"15"},{"size":273,"mtime":1638733016214,"results":"25","hashOfConfig":"15"},{"size":15670,"mtime":1638733016211,"results":"26","hashOfConfig":"15"},{"size":378,"mtime":1638786706762,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"jihhiw",{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/jordanmckenna/Documents/GitHub/java-project-da-fighters-frontend/src/index.js",[],["58","59"],"/Users/jordanmckenna/Documents/GitHub/java-project-da-fighters-frontend/src/reportWebVitals.js",[],"/Users/jordanmckenna/Documents/GitHub/java-project-da-fighters-frontend/src/App.js",[],"/Users/jordanmckenna/Documents/GitHub/java-project-da-fighters-frontend/src/containers/MainContainer.js",[],"/Users/jordanmckenna/Documents/GitHub/java-project-da-fighters-frontend/src/containers/DaContainer.js",["60","61","62","63"],"/Users/jordanmckenna/Documents/GitHub/java-project-da-fighters-frontend/src/components/Home.js",["64","65"],"import React from \"react\";\nimport ReactAudioPlayer from \"react-audio-player\";\n\n\n    const audio = new Audio('public/home_page.mp3');\n    audio.play();\n\n\nconst Home = () => {\n    return(\t\t\n        <>\n    <img className=\"main_logo\" height=\"600\" src={`${process.env.PUBLIC_URL}/logo.gif`}  />\n      <div>\n        <a href=\"/select\">\n        <img className=\"press_start\" height=\"100\" src={`${process.env.PUBLIC_URL}/press_start.gif`}  />\n        </a>\n      </div>\n      <ReactAudioPlayer className=\"audio_player\" src= \"intro.mp3\" autoplay controls/>\n\n</>\n\n    )}\n\n\n\nexport default Home;","/Users/jordanmckenna/Documents/GitHub/java-project-da-fighters-frontend/src/components/DaForm.js",[],"/Users/jordanmckenna/Documents/GitHub/java-project-da-fighters-frontend/src/components/DaList.js",[],"/Users/jordanmckenna/Documents/GitHub/java-project-da-fighters-frontend/src/helpers/request.js",[],"/Users/jordanmckenna/Documents/GitHub/java-project-da-fighters-frontend/src/components/ResultScreen.js",["66"],"import React from 'react'\nimport { Link } from 'react-router-dom';\nimport FinishScreen from './FinishScreen';\n\nconst ResultScreen = ({ winner, playerDa, onGameFinished, das, computerDa, onChooseNextRandomDa, onPlayerDaContinue, onNewDasList, onAllDasBeaten }) => {\n\n    const handleOnClick = function () {\n        onGameFinished(null);\n    }\n\n    const handleOnNextDaClick = function () {\n        const copiedDas = [...das]\n        if (copiedDas.length < 2) {\n            onAllDasBeaten(playerDa)\n        } else {\n            for (var i = 0; i < copiedDas.length; i++) {\n                if (copiedDas[i] === computerDa) {\n                    copiedDas.splice(i, 1);\n                }\n                if (copiedDas[i] === playerDa) {\n                    copiedDas.splice(i, 1);\n                }\n            }\n            const randomIndex = Math.floor(Math.random() * copiedDas.length);\n            const randomDa = copiedDas[randomIndex];\n            onChooseNextRandomDa(randomDa)\n            onGameFinished(null)\n            onPlayerDaContinue(playerDa)\n            onNewDasList(copiedDas)\n        }\n    }\n\n\n\n    return (\n        <div className=\"health\">\n            <h1>{winner.name} Won !</h1>\n            {winner.name === playerDa.name ?\n                <div>\n                    <h2> You battered them !</h2>\n                    {das.length < 2 ?\n                        <button type=\"button\" onClick={handleOnNextDaClick}>Mon then ...</button>\n                        :\n                        <Link to=\"/fight\">\n                            <button type=\"button\" onClick={handleOnNextDaClick}>Mon then ...</button>\n                        </Link>\n                    }\n                </div>\n                :\n                <div>\n                    <h2> You got smashed ...</h2>\n                    <Link to=\"/select\"><button type=\"button\" onClick={handleOnClick}>Play again ...</button></Link>\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default ResultScreen\n\n// if player loses, 'play again' returns to select screen\n// if player wins, want to move on to next 'level' (new random da)","/Users/jordanmckenna/Documents/GitHub/java-project-da-fighters-frontend/src/components/FinishScreen.js",[],"/Users/jordanmckenna/Documents/GitHub/java-project-da-fighters-frontend/src/components/FightScreen.js",["67","68","69","70","71","72","73","74","75","76"],"import React, { useEffect, useRef, useState } from 'react';\nimport CountUp from 'react-countup';\nimport { Link } from 'react-router-dom';\nimport '../App.css'\nimport { getFID } from 'web-vitals';\n\nconst FightScreen = ({ playerDa, computerDa, onGameFinished, das }) => {\n\n    const [computerHealth, setComputerHealth] = useState(20);\n    const [previousComputerHealth, setPreviousComputerHealth] = useState(0);\n    const [playerHealth, setPlayerHealth] = useState(100);\n    const [previousPlayerHealth, setPreviousPlayerHealth] = useState(0);\n    const [computerSpecialUsed, setComputerSpecialUsed] = useState(false);\n    const [playerSpecialUsed, setPlayerSpecialUsed] = useState(false);\n    const [gameFinished, setGameFinished] = useState(false);\n    const [gif, setGif] = useState(false)\n\n    useEffect(() => {\n        if (computerHealth <= 0 & playerHealth > 0) {\n            onGameFinished(playerDa);\n        } else if (playerHealth <= 0 & computerHealth > 0) {\n            onGameFinished(computerDa);\n        }\n    }, [computerHealth, playerHealth])\n\n    const getRandomNumber = function (min, max) {\n        return Math.floor(Math.random() * ((max - min) + 1) + min);\n    }\n\n    const handleAttack1Click = function () {\n        let damage = 0;\n        if (playerDa.daType === \"BUFFDA\") {\n            damage = getRandomNumber(18, 30)\n        } else if (playerDa.daType === \"AVERAGEDA\") {\n            damage = getRandomNumber(23, 25)\n        } else {\n            damage = getRandomNumber(18, 25)\n        }\n        setPreviousComputerHealth(computerHealth)\n        setComputerHealth(computerHealth => computerHealth - damage)\n        console.log(\"player hit computer for : \" + damage);\n        // checkIfGameFinished()\n        setGif(true)\n        setTimeout(function () {\n            setGif(false)\n        }, 1500)\n        setTimeout(function () {\n            computerTurn()\n        }, 2000)\n    }\n\n    const handleAttack2Click = function () {\n        let damage = getRandomNumber(10, 35);\n        setPreviousComputerHealth(computerHealth)\n        setComputerHealth(computerHealth => computerHealth - damage)\n        console.log(\"player hit computer for : \" + damage);\n        // checkIfGameFinished();\n        setGif(true)\n        setTimeout(function () {\n            setGif(false)\n        }, 1500)\n        setTimeout(function () {\n            computerTurn()\n        }, 2000)\n    }\n\n    const handleHealClick = function () {\n        let heal = 0;\n        if (playerDa.daType === \"SOFTDA\") {\n            heal = getRandomNumber(23, 25)\n        } else {\n            heal = getRandomNumber(18, 25)\n        }\n        if ((playerHealth + heal) >= 100) {\n            setPreviousPlayerHealth(playerHealth)\n            setPlayerHealth(playerhealth => 100)\n        } else if (playerHealth <= 30) {\n            heal = getRandomNumber(24, 25)\n            setPreviousPlayerHealth(playerHealth)\n            setPlayerHealth(playerHealth => playerHealth + heal)\n        } else {\n            const health = playerHealth + heal;\n            setPreviousPlayerHealth(playerHealth)\n            setPlayerHealth(playerHealth => playerHealth + heal)\n        }\n        console.log(\"player healed for : \" + heal);\n        setTimeout(function () {\n            computerTurn()\n        }, 2000)\n    }\n\n    const handleSpecialClick = function () {\n        if (playerSpecialUsed === false) {\n            let opponentDamage = 45;\n            let selfDamage = 25;\n            const specialOutcome = [opponentDamage, opponentDamage, selfDamage]\n            const specialNumber = Math.floor(Math.random() * 3);\n            if (specialOutcome[specialNumber] === opponentDamage) {\n                setPreviousComputerHealth(computerHealth)\n                setComputerHealth(computerHealth => computerHealth - opponentDamage);\n                setPlayerSpecialUsed(true);\n                playerDa.specialName = \"Special Used\"\n                console.log(\"player hit computer for : \" + opponentDamage);\n                setTimeout(function () {\n                    computerTurn()\n                }, 2000)\n            } else if (specialOutcome[specialNumber] === selfDamage) {\n                setPreviousPlayerHealth(playerHealth)\n                setPlayerHealth(playerHealth => playerHealth - selfDamage);\n                setPlayerSpecialUsed(true);\n                playerDa.specialName = \"Special Used\"\n                console.log(\"player hit themselves for : \" + selfDamage);\n                setTimeout(function () {\n                    computerTurn()\n                }, 2000)\n            }\n        } else {\n            return null;\n        }\n    }\n\n    const computerTurn = function () {\n        const Attack1 = function () {\n            let damage = 0;\n            if (computerDa.daType === \"BUFFDA\") {\n                damage = getRandomNumber(18, 30)\n            } else if (computerDa.daType === \"AVERAGEDA\") {\n                damage = getRandomNumber(23, 25)\n            } else {\n                damage = getRandomNumber(18, 25)\n            }\n            setPreviousPlayerHealth(playerHealth)\n            setPlayerHealth(playerHealth => playerHealth - damage)\n            console.log(\"computer hit player for : \" + damage);\n            // checkIfGameFinished();\n            setGif(true)\n            setTimeout(function () {\n                setGif(false)\n            }, 1500)\n        }\n        const Attack2 = function () {\n            let damage = getRandomNumber(10, 35);\n            setPreviousPlayerHealth(playerHealth)\n            setPlayerHealth(playerHealth => playerHealth - damage);\n            console.log(\"computer hit player for : \" + damage);\n            // checkIfGameFinished();\n            setGif(true)\n            setTimeout(function () {\n                setGif(false)\n            }, 1500)\n        }\n        const Heal = function () {\n            let heal = 0;\n            if (computerDa.daType === \"SOFTDA\") {\n                heal = getRandomNumber(23, 25)\n            } else {\n                heal = getRandomNumber(18, 25)\n            }\n            if ((computerHealth + heal) >= 100) {\n                setPreviousComputerHealth(computerHealth)\n                setComputerHealth(computerHealth => 100);\n            } else if (computerHealth <= 30) {\n                heal = getRandomNumber(24, 25)\n                setPreviousComputerHealth(computerHealth)\n                setComputerHealth(computerHealth => computerHealth + heal)\n            } else {\n                setPreviousComputerHealth(computerHealth)\n                setComputerHealth(computerHealth => computerHealth + heal)\n            }\n            console.log(\"computer healed for : \" + heal);\n        }\n        const Special = function () {\n            let opponentDamage = 45;\n            let selfDamage = 25;\n            const specialOutcome = [opponentDamage, opponentDamage, selfDamage]\n            const specialNumber = Math.floor(Math.random() * 3);\n            if (specialOutcome[specialNumber] === opponentDamage) {\n                setPreviousPlayerHealth(playerHealth)\n                setPlayerHealth(playerHealth => playerHealth - opponentDamage);\n                setComputerSpecialUsed(true);\n                computerDa.specialName = \"Special Used\"\n                console.log(\"computer hit player for : \" + opponentDamage);\n            } else if (specialOutcome[specialNumber] === selfDamage) {\n                setPreviousComputerHealth(computerHealth)\n                setComputerHealth(computerHealth => computerHealth - selfDamage);\n                setComputerSpecialUsed(true);\n                computerDa.specialName = \"Special Used\"\n                console.log(\"computer hit themselves for : \" + selfDamage);\n            }\n        }\n        if (computerHealth >= 80) {\n            if (computerSpecialUsed === false) {\n                const randomMove = [Attack1, Attack2, Special]\n                const randomNumber = Math.floor(Math.random() * 3);\n                setTimeout(function () {\n                    randomMove[randomNumber]()\n                }, 1000)\n            } else {\n                const randomMove = [Attack1, Attack2]\n                const randomNumber = Math.floor(Math.random() * 2);\n                setTimeout(function () {\n                    randomMove[randomNumber]()\n                }, 1000)\n            }\n        } else if (computerHealth >= 60) {\n            if (computerSpecialUsed === false) {\n                const randomMove = [Attack1, Attack2, Heal, Special]\n                const randomNumber = Math.floor(Math.random() * 4);\n                setTimeout(function () {\n                    randomMove[randomNumber]()\n                }, 1000)\n            } else {\n                const randomMove = [Attack1, Attack2, Heal]\n                const randomNumber = Math.floor(Math.random() * 3);\n                setTimeout(function () {\n                    randomMove[randomNumber]()\n                }, 1000)\n            }\n        } else if (computerHealth >= 40) {\n            if (computerSpecialUsed === false) {\n                const randomMove = [Attack1, Attack2, Heal, Heal, Special]\n                const randomNumber = Math.floor(Math.random() * 5);\n                setTimeout(function () {\n                    randomMove[randomNumber]()\n                }, 1000)\n            } else {\n                const randomMove = [Attack1, Attack2, Heal, Heal]\n                const randomNumber = Math.floor(Math.random() * 4);\n                setTimeout(function () {\n                    randomMove[randomNumber]()\n                }, 1000)\n            }\n        } else if (computerHealth <= 39) {\n            if (computerSpecialUsed === false) {\n                const randomMove = [Attack1, Attack2, Heal, Heal, Heal, Heal, Special]\n                const randomNumber = Math.floor(Math.random() * 7);\n                setTimeout(function () {\n                    randomMove[randomNumber]()\n                }, 1000)\n            } else {\n                const randomMove = [Attack1, Attack2, Heal, Heal, Heal, Heal]\n                const randomNumber = Math.floor(Math.random() * 6);\n                setTimeout(function () {\n                    randomMove[randomNumber]()\n                }, 1000)\n            }\n        }\n    };\n\n\n    const showFist = function () {\n        return <img src={`${process.env.PUBLIC_URL}/fist.gif`} height=\"200px\" width=\"200px\" />\n    }\n\n\n\n    if (gameFinished === false) {\n        return (\n            <>\n                {das.length < 2 ?\n                    <div>\n                        <h1 className=\"health\">FINAL ROUND</h1>\n                    </div>\n                    :\n                    <div></div>}\n                <div>\n                    <img src={`${process.env.PUBLIC_URL}/${playerDa.imgName}`} width=\"200\" height=\"250\" />\n                    <ul>\n                        <li className=\"health\">{playerDa.name}</li>\n                        <li className=\"health\">{playerDa.bio}</li>\n                        <li className=\"health\">{playerDa.attackOneName}...  <button onClick={handleAttack1Click}>ATTACK</button></li>\n                        <li className=\"health\">{playerDa.attackTwoName}...  <button onClick={handleAttack2Click}>ATTACK</button></li>\n                        <li className=\"health\">{playerDa.healName}...  <button onClick={handleHealClick}>HEAL</button></li>\n                    </ul>\n                    {previousPlayerHealth > playerHealth ?\n                        <CountUp\n                            className=\"countUpRed\"\n                            start={previousPlayerHealth}\n                            end={playerHealth}\n                            duration=\"1\"\n                        /> :\n                        <CountUp\n                            className=\"countUpGreen\"\n                            start={previousPlayerHealth}\n                            end={playerHealth}\n                            duration=\"1\"\n                        />}\n                </div>\n                {gif === true ? showFist() : null}\n                <div>\n                    <img src={`${process.env.PUBLIC_URL}/${computerDa.imgName}`} width=\"220\" height=\"250\" />\n                    <ul>\n                        <li className=\"health\">{computerDa.name}</li>\n                        <li className=\"health\">{computerDa.bio}</li>\n                        <li className=\"health\">{computerDa.attackOneName}...  <button>ATTACK</button></li>\n                        <li className=\"health\">{computerDa.attackTwoName}...  <button>ATTACK</button></li>\n                        <li className=\"health\">{computerDa.healName}...  <button>HEAL</button></li>\n                    </ul>\n\n                    {previousComputerHealth > computerHealth ?\n                        <CountUp\n                            className=\"countUpRed\"\n                            start={previousComputerHealth}\n                            end={computerHealth}\n                            duration=\"1\"\n                        /> :\n                        <CountUp\n                            className=\"countUpGreen\"\n                            start={previousComputerHealth}\n                            end={computerHealth}\n                            duration=\"1\"\n                        />}\n                </div>\n            </>\n        )\n    } else {\n        if (computerHealth <= 0) {\n            return (\n                <>\n                    <div className=\"health\">\n                        <h1>{playerDa.name} smashed {computerDa.name}</h1>\n                        <h2>You Win !</h2>\n                    </div>\n                </>\n            )\n        } else {\n            return (\n                <>\n                    <div className=\"health\">\n                        <h1>{computerDa.name} wrecked {playerDa.name}</h1>\n                        <h2>You Lose !</h2>\n                    </div>\n                </>\n            )\n        }\n        \n        //         <div>\n        //             {playerDa.name}\n        //             {/* <img src={`${process.env.PUBLIC_URL}/${playerDa.specialName}`} /> */}\n        //             <ul>\n        //                 <li><button onClick={handleAttack1Click}>{playerDa.attackOneName}</button></li>\n        //                 <li><button onClick={handleAttack2Click}>{playerDa.attackTwoName}</button></li>\n        //                 <li><button onClick={handleHealClick}>{playerDa.healName}</button></li>\n        //                 <li><button onClick={handleSpecialClick}>{playerDa.specialName}</button></li>\n        //                 <li><CountUp\n        //                     className=\"health\"\n        //                     start={previousPlayerHealth}\n        //                     end={playerHealth}\n        //                     duration=\"1\"\n        //                 />\n        //                 </li>\n        //             </ul>\n        //         </div>\n        //         <div>\n        //             {computerDa.name}\n        //             <ul>\n        //                 <li><button>{computerDa.attackOneName}</button></li>\n        //                 <li><button>{computerDa.attackTwoName}</button></li>\n        //                 <li><button>{computerDa.healName}</button></li>\n        //                 <li><button>{computerDa.specialName}</button></li>\n        //                 <li><CountUp\n        //                     className=\"health\"\n        //                     start={previousComputerHealth}\n        //                     end={computerHealth}\n        //                     duration=\"1\"\n        //                 />\n        //                 </li>\n        //             </ul>\n        //         </div>\n        //     </>\n    }\n}\n\nexport default FightScreen;","/Users/jordanmckenna/Documents/GitHub/java-project-da-fighters-frontend/src/components/Da.js",["77"],{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":4,"column":8,"nodeType":"84","messageId":"85","endLine":4,"endColumn":14},{"ruleId":"82","severity":1,"message":"86","line":7,"column":8,"nodeType":"84","messageId":"85","endLine":7,"endColumn":12},{"ruleId":"87","severity":1,"message":"88","line":35,"column":6,"nodeType":"89","endLine":35,"endColumn":16,"suggestions":"90"},{"ruleId":"82","severity":1,"message":"91","line":37,"column":9,"nodeType":"84","messageId":"85","endLine":37,"endColumn":19},{"ruleId":"92","severity":1,"message":"93","line":12,"column":5,"nodeType":"94","endLine":12,"endColumn":91},{"ruleId":"92","severity":1,"message":"93","line":15,"column":9,"nodeType":"94","endLine":15,"endColumn":104},{"ruleId":"82","severity":1,"message":"95","line":3,"column":8,"nodeType":"84","messageId":"85","endLine":3,"endColumn":20},{"ruleId":"82","severity":1,"message":"96","line":1,"column":28,"nodeType":"84","messageId":"85","endLine":1,"endColumn":34},{"ruleId":"82","severity":1,"message":"97","line":3,"column":10,"nodeType":"84","messageId":"85","endLine":3,"endColumn":14},{"ruleId":"82","severity":1,"message":"98","line":5,"column":10,"nodeType":"84","messageId":"85","endLine":5,"endColumn":16},{"ruleId":"82","severity":1,"message":"99","line":15,"column":26,"nodeType":"84","messageId":"85","endLine":15,"endColumn":41},{"ruleId":"87","severity":1,"message":"100","line":24,"column":8,"nodeType":"89","endLine":24,"endColumn":38,"suggestions":"101"},{"ruleId":"82","severity":1,"message":"102","line":82,"column":19,"nodeType":"84","messageId":"85","endLine":82,"endColumn":25},{"ruleId":"82","severity":1,"message":"103","line":92,"column":11,"nodeType":"84","messageId":"85","endLine":92,"endColumn":29},{"ruleId":"92","severity":1,"message":"93","line":252,"column":16,"nodeType":"94","endLine":252,"endColumn":95},{"ruleId":"92","severity":1,"message":"93","line":267,"column":21,"nodeType":"94","endLine":267,"endColumn":107},{"ruleId":"92","severity":1,"message":"93","line":291,"column":21,"nodeType":"94","endLine":291,"endColumn":109},{"ruleId":"92","severity":1,"message":"93","line":14,"column":7,"nodeType":"94","endLine":14,"endColumn":107},"no-native-reassign",["104"],"no-negated-in-lhs",["105"],"no-unused-vars","'DaForm' is defined but never used.","Identifier","unusedVar","'Home' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'selectComputerDa'. Either include it or remove the dependency array.","ArrayExpression",["106"],"'handlePost' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'FinishScreen' is defined but never used.","'useRef' is defined but never used.","'Link' is defined but never used.","'getFID' is defined but never used.","'setGameFinished' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'computerDa', 'onGameFinished', and 'playerDa'. Either include them or remove the dependency array. If 'onGameFinished' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["107"],"'health' is assigned a value but never used.","'handleSpecialClick' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"108","fix":"109"},{"desc":"110","fix":"111"},"Update the dependencies array to be: [playerDa, selectComputerDa]",{"range":"112","text":"113"},"Update the dependencies array to be: [computerDa, computerHealth, onGameFinished, playerDa, playerHealth]",{"range":"114","text":"115"},[1007,1017],"[playerDa, selectComputerDa]",[1023,1053],"[computerDa, computerHealth, onGameFinished, playerDa, playerHealth]"]