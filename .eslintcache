[{"/Users/morven/Desktop/G27/codeclan_work/java_project/front-end-da-fighters/java-project-da-fighters-frontend/src/index.js":"1","/Users/morven/Desktop/G27/codeclan_work/java_project/front-end-da-fighters/java-project-da-fighters-frontend/src/reportWebVitals.js":"2","/Users/morven/Desktop/G27/codeclan_work/java_project/front-end-da-fighters/java-project-da-fighters-frontend/src/App.js":"3","/Users/morven/Desktop/G27/codeclan_work/java_project/front-end-da-fighters/java-project-da-fighters-frontend/src/containers/MainContainer.js":"4","/Users/morven/Desktop/G27/codeclan_work/java_project/front-end-da-fighters/java-project-da-fighters-frontend/src/components/Home.js":"5","/Users/morven/Desktop/G27/codeclan_work/java_project/front-end-da-fighters/java-project-da-fighters-frontend/src/containers/DaContainer.js":"6","/Users/morven/Desktop/G27/codeclan_work/java_project/front-end-da-fighters/java-project-da-fighters-frontend/src/components/ResultScreen.js":"7","/Users/morven/Desktop/G27/codeclan_work/java_project/front-end-da-fighters/java-project-da-fighters-frontend/src/components/CreateADa.js":"8","/Users/morven/Desktop/G27/codeclan_work/java_project/front-end-da-fighters/java-project-da-fighters-frontend/src/components/FinishScreen.js":"9","/Users/morven/Desktop/G27/codeclan_work/java_project/front-end-da-fighters/java-project-da-fighters-frontend/src/components/Scoreboard.js":"10","/Users/morven/Desktop/G27/codeclan_work/java_project/front-end-da-fighters/java-project-da-fighters-frontend/src/helpers/request.js":"11","/Users/morven/Desktop/G27/codeclan_work/java_project/front-end-da-fighters/java-project-da-fighters-frontend/src/components/FightScreen.js":"12","/Users/morven/Desktop/G27/codeclan_work/java_project/front-end-da-fighters/java-project-da-fighters-frontend/src/components/DaList.js":"13","/Users/morven/Desktop/G27/codeclan_work/java_project/front-end-da-fighters/java-project-da-fighters-frontend/src/components/ScoreboardPoints.js":"14","/Users/morven/Desktop/G27/codeclan_work/java_project/front-end-da-fighters/java-project-da-fighters-frontend/src/components/ScoreboardDa.js":"15","/Users/morven/Desktop/G27/codeclan_work/java_project/front-end-da-fighters/java-project-da-fighters-frontend/src/components/Da.js":"16"},{"size":500,"mtime":1638613238446,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":1638613238446,"results":"19","hashOfConfig":"18"},{"size":200,"mtime":1638613270073,"results":"20","hashOfConfig":"18"},{"size":740,"mtime":1638806049634,"results":"21","hashOfConfig":"18"},{"size":608,"mtime":1638806049633,"results":"22","hashOfConfig":"18"},{"size":3644,"mtime":1638806049719,"results":"23","hashOfConfig":"18"},{"size":2118,"mtime":1638806049634,"results":"24","hashOfConfig":"18"},{"size":2676,"mtime":1638878856653,"results":"25","hashOfConfig":"18"},{"size":447,"mtime":1638806049633,"results":"26","hashOfConfig":"18"},{"size":3169,"mtime":1638810572646,"results":"27","hashOfConfig":"18"},{"size":593,"mtime":1638806049634,"results":"28","hashOfConfig":"18"},{"size":15700,"mtime":1638806383779,"results":"29","hashOfConfig":"18"},{"size":634,"mtime":1638806302042,"results":"30","hashOfConfig":"18"},{"size":352,"mtime":1638810569159,"results":"31","hashOfConfig":"18"},{"size":195,"mtime":1638810570825,"results":"32","hashOfConfig":"18"},{"size":335,"mtime":1638806322862,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1qgpvhc",{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"36"},"/Users/morven/Desktop/G27/codeclan_work/java_project/front-end-da-fighters/java-project-da-fighters-frontend/src/index.js",[],["73","74"],"/Users/morven/Desktop/G27/codeclan_work/java_project/front-end-da-fighters/java-project-da-fighters-frontend/src/reportWebVitals.js",[],"/Users/morven/Desktop/G27/codeclan_work/java_project/front-end-da-fighters/java-project-da-fighters-frontend/src/App.js",[],"/Users/morven/Desktop/G27/codeclan_work/java_project/front-end-da-fighters/java-project-da-fighters-frontend/src/containers/MainContainer.js",[],"/Users/morven/Desktop/G27/codeclan_work/java_project/front-end-da-fighters/java-project-da-fighters-frontend/src/components/Home.js",[],"/Users/morven/Desktop/G27/codeclan_work/java_project/front-end-da-fighters/java-project-da-fighters-frontend/src/containers/DaContainer.js",["75","76"],"import React, { useState, useEffect } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport DaList from '../components/DaList';\nimport CreateADa from '../components/CreateADa';\nimport FightScreen from '../components/FightScreen';\nimport ResultScreen from '../components/ResultScreen';\nimport FinishScreen from '../components/FinishScreen';\nimport Scoreboard from '../components/Scoreboard';\nimport Request from '../helpers/request';\n\n\nconst DaContainer = () => {\n  const [das, setDas] = useState([]);\n  const [playerDa, setPlayerDa] = useState(null)\n  const [computerDa, setComputerDa] = useState(null)\n  const [winner, setWinner] = useState(null)\n  const [gameFinished, setGameFinished] = useState(null)\n\n  const requestAll = function () {\n    const request = new Request();\n    const dasPromise = request.get('/select')\n\n    Promise.all([dasPromise])\n      .then((data) => {\n        setDas(data[0]);\n      })\n  }\n\n  useEffect(() => {\n    requestAll()\n  }, [])\n\n  useEffect(() => {\n    selectComputerDa()\n  }, [playerDa])\n\n  const handlePost = function (da) {\n    const request = new Request();\n    request.post(\"/create-a-da\", da)\n      .then(() => window.location = '/select')\n  }\n\n  const findDaById = function (id) {\n    return das.find((da) => {\n      return da.id === parseInt(id);\n    })\n  }\n\n  const handleUpdate = function (da) {\n    const request = new Request();\n    request.patch('/scoreboard/' + da.id, da)\n      // .then(() => {\n      //   window.location = '/scoreboard/:id'\n      // })\n  }\n\n  const onDaClicked = function (da) {\n    setPlayerDa(da);\n    <Route path=\"/result\" render={() => {\n      return <ResultScreen />\n    }} />\n  }\n\n  const onGameFinished = function (da) {\n    setWinner(da)\n  }\n\n  const onChooseNextRandomDa = function (da) {\n    setComputerDa(da)\n  }\n\n  const onPlayerDaContinue = function (da) {\n    setPlayerDa(da)\n  }\n\n  const onNewDasList = function (das) {\n    setDas(das)\n  }\n\n  const onAllDasBeaten = function (da) {\n    setGameFinished(da)\n  }\n\n  const selectComputerDa = function () {\n    const copiedDas = [...das]\n    for (var i = 0; i < copiedDas.length; i++) {\n      if (copiedDas[i] === playerDa) {\n        copiedDas.splice(i, 1);\n      }\n    }\n    const randomIndex = Math.floor(Math.random() * copiedDas.length);\n    const randomDa = copiedDas[randomIndex];\n    setComputerDa(randomDa)\n  }\n\n  if (winner === null) {\n    return (\n      <div>\n        <Switch>\n          <Route path=\"/select\" render={() => {\n            return <DaList classname=\"DaList\" das={das} onDaClicked={onDaClicked} />\n          }} />\n          <Route path=\"/fight\" render={() => {\n            return <FightScreen playerDa={playerDa} computerDa={computerDa} onGameFinished={onGameFinished} das={das} />\n          }} />\n          <Route path=\"/create-a-da\" render={() => {\n            return <CreateADa handlePost={handlePost} />\n          }} />\n          <Route path=\"/scoreboard/:id\" render={(props) => {\n            const id = props.match.params.id;\n            const da = findDaById(id);\n             return <Scoreboard das={das} handleUpdate={handleUpdate}/> \n          }} />\n        </Switch>\n      </div>\n    )\n  } else if (gameFinished != null) {\n    return (\n      <div>\n        <FinishScreen winner={winner} />\n      </div>\n    )\n  } else {\n    return (\n      <div>\n        <ResultScreen winner={winner} playerDa={playerDa} onGameFinished={onGameFinished} das={das} computerDa={computerDa} onChooseNextRandomDa={onChooseNextRandomDa} onPlayerDaContinue={onPlayerDaContinue} onNewDasList={onNewDasList} onAllDasBeaten={onAllDasBeaten} />\n      </div>\n    )\n  }\n}\n\nexport default DaContainer;","/Users/morven/Desktop/G27/codeclan_work/java_project/front-end-da-fighters/java-project-da-fighters-frontend/src/components/ResultScreen.js",["77"],"import React from 'react'\nimport { Link } from 'react-router-dom';\nimport FinishScreen from './FinishScreen';\n\nconst ResultScreen = ({ winner, playerDa, onGameFinished, das, computerDa, onChooseNextRandomDa, onPlayerDaContinue, onNewDasList, onAllDasBeaten }) => {\n\n    const handleOnClick = function () {\n        onGameFinished(null);\n    }\n\n    const handleOnNextDaClick = function () {\n        const copiedDas = [...das]\n        if (copiedDas.length < 2) {\n            onAllDasBeaten(playerDa)\n        } else {\n            for (var i = 0; i < copiedDas.length; i++) {\n                if (copiedDas[i] === computerDa) {\n                    copiedDas.splice(i, 1);\n                }\n                if (copiedDas[i] === playerDa) {\n                    copiedDas.splice(i, 1);\n                }\n            }\n            const randomIndex = Math.floor(Math.random() * copiedDas.length);\n            const randomDa = copiedDas[randomIndex];\n            onChooseNextRandomDa(randomDa)\n            onGameFinished(null)\n            onPlayerDaContinue(playerDa)\n            onNewDasList(copiedDas)\n        }\n    }\n\n    return (\n        <div className=\"health\">\n            <h1>{winner.name} Won !</h1>\n            {winner.name === playerDa.name ?\n                <div>\n                    <h2> You battered them !</h2>\n                    {das.length < 2 ?\n                        <button type=\"button\" onClick={handleOnNextDaClick}>Mon then ...</button>\n                        :\n                        <Link to=\"/fight\">\n                            <button type=\"button\" onClick={handleOnNextDaClick}>Mon then ...</button>\n                        </Link>\n                    }\n                </div>\n                :\n                <div>\n                    <h2> You got smashed ...</h2>\n                    <Link to=\"/select\"><button type=\"button\" onClick={handleOnClick}>Play again ...</button></Link>\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default ResultScreen\n\n// if player loses, 'play again' returns to select screen\n// if player wins, want to move on to next 'level' (new random da)","/Users/morven/Desktop/G27/codeclan_work/java_project/front-end-da-fighters/java-project-da-fighters-frontend/src/components/CreateADa.js",["78","79"],"/Users/morven/Desktop/G27/codeclan_work/java_project/front-end-da-fighters/java-project-da-fighters-frontend/src/components/FinishScreen.js",[],"/Users/morven/Desktop/G27/codeclan_work/java_project/front-end-da-fighters/java-project-da-fighters-frontend/src/components/Scoreboard.js",["80"],"import React, { useState } from 'react';\nimport ScoreboardDa from './ScoreboardDa';\nimport ScoreboardPoints from './ScoreboardPoints';\nimport '../Scoreboard.css'\n\nconst Scoreboard = ({ das, handleUpdate }) => {\n\n    const [stateDa, setStateDa] = useState(\n        {\n            \"id\": \"\",\n            \"name\": \"\",\n            \"bio\": \"\",\n            \"daType\": \"\",\n            \"attackOneName\": \"\",\n            \"attackTwoName\": \"\",\n            \"healName\": \"\",\n            \"imgName\": \"\",\n            \"startingHealth\": 100,\n            \"currentHealth\": 100,\n            \"points\": 0\n        }\n    )\n\n    const [disable, setDisable] = useState(false);\n\n    const findDaById = function () {\n        let url = window.location.pathname\n        let id = url.substring(url.lastIndexOf('/') + 1);\n        return das.find((da) => {\n            return da.id === parseInt(id);\n        })\n    }\n\n    let daWinner = findDaById()\n\n    const handleSubmit = function (event) {\n        event.preventDefault();\n        let copiedDa = { ...stateDa }\n        copiedDa['id'] = daWinner.id\n        copiedDa[\"name\"] = daWinner.name\n        copiedDa[\"bio\"] = daWinner.bio\n        copiedDa[\"daType\"] = daWinner.daType\n        copiedDa[\"attackOneName\"] = daWinner.attackOneName\n        copiedDa[\"attackTwoName\"] = daWinner.attackTwoName\n        copiedDa[\"healName\"] = daWinner.healName\n        copiedDa[\"imgName\"] = daWinner.imgName\n        copiedDa[\"points\"] = daWinner.points += 100\n        handleUpdate(copiedDa)\n        setDisable(true)\n    }\n\n    // das.sort(function (a, b) {\n    //     return b.points - a.points;\n    // })\n\n    const dasNodes = das.map((da, index) => {\n        return (\n            <ScoreboardDa da={da} key={index} />\n        )\n    })\n\n    const daPoints = das.map((da, index) => {\n        return (\n            <ScoreboardPoints da={da} key={index} />\n        )\n    })\n\n\n    // <div className=\"scoreboard\">\n    //     <form onSubmit={handleSubmit}>\n    //         <button type=\"submit\" disabled={disable}>You have Scored 100 Points - Click to Collect Points </button>\n    //     </form>\n    //     <span>Da League</span><span className=\"right\">Points</span>\n    //     <div>\n    //         {dasNodes}\n    //     </div>\n    // </div>\n\n    return (\n        <div >\n            <form onSubmit={handleSubmit}>\n                <button type=\"submit\" disabled={disable} className=\"buttonScoreboard\">You have Scored 100 Points - Click to Collect Points </button>\n            </form>\n            <table className=\"scoreboard\">\n                <thead >\n                    <tr>\n                        <th colspan={das.length} className=\"header\">SCOREBOARD</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td><span className=\"daName\">Da</span></td>\n                        <td><span className=\"daPoints\">Points</span></td>\n                    </tr>\n                    <tr>\n                        <td>{dasNodes}</td>\n                        <td>{daPoints}</td>\n    \n                    </tr>\n                \n                </tbody>\n            </table>\n        </div>\n    )\n}\n\nexport default Scoreboard;","/Users/morven/Desktop/G27/codeclan_work/java_project/front-end-da-fighters/java-project-da-fighters-frontend/src/helpers/request.js",[],"/Users/morven/Desktop/G27/codeclan_work/java_project/front-end-da-fighters/java-project-da-fighters-frontend/src/components/FightScreen.js",["81","82","83","84","85"],"import React, { useEffect, useState } from 'react';\nimport CountUp from 'react-countup';\nimport '../App.css'\n\n\nconst FightScreen = ({ playerDa, computerDa, onGameFinished, das }) => {\n\n    const [computerHealth, setComputerHealth] = useState(100);\n    const [previousComputerHealth, setPreviousComputerHealth] = useState(0);\n    const [playerHealth, setPlayerHealth] = useState(100);\n    const [previousPlayerHealth, setPreviousPlayerHealth] = useState(0);\n    const [computerSpecialUsed, setComputerSpecialUsed] = useState(false);\n    const [playerSpecialUsed, setPlayerSpecialUsed] = useState(false);\n    const [gameFinished, setGameFinished] = useState(false);\n    const [gif, setGif] = useState(false)\n    const [leftGif, setLeftGif] = useState(false)\n    const [rightGif, setRightGif] = useState(false)\n    const [healGif, setHealGif] = useState(false)\n\n    useEffect(() => {\n        if (computerHealth <= 0 & playerHealth > 0) {\n            onGameFinished(playerDa);\n        } else if (playerHealth <= 0 & computerHealth > 0) {\n            onGameFinished(computerDa);\n        }\n    }, [computerHealth, playerHealth])\n\n    const getRandomNumber = function (min, max) {\n        return Math.floor(Math.random() * ((max - min) + 1) + min);\n    }\n\n    const handleAttack1Click = function () {\n        let damage = 0;\n        if (playerDa.daType === \"BUFFDA\") {\n            damage = getRandomNumber(18, 30)\n        } else if (playerDa.daType === \"AVERAGEDA\") {\n            damage = getRandomNumber(23, 25)\n        } else {\n            damage = getRandomNumber(18, 25)\n        }\n        setPreviousComputerHealth(computerHealth)\n        setComputerHealth(computerHealth => computerHealth - damage)\n        console.log(\"player hit computer for : \" + damage);\n        // checkIfGameFinished()\n        setGif(true)\n        setTimeout(function () {\n            setGif(false)\n        }, 1500)\n        setTimeout(function () {\n            computerTurn()\n        }, 2000)\n    }\n\n    const handleAttack2Click = function () {\n        let damage = getRandomNumber(10, 35);\n        setPreviousComputerHealth(computerHealth)\n        setComputerHealth(computerHealth => computerHealth - damage)\n        console.log(\"player hit computer for : \" + damage);\n        // checkIfGameFinished();\n        setGif(true)\n        setTimeout(function () {\n            setGif(false)\n        }, 1500)\n        setTimeout(function () {\n            computerTurn()\n        }, 2000)\n    }\n\n    const handleHealClick = function () {\n        let heal = 0;\n        if (playerDa.daType === \"SOFTDA\") {\n            heal = getRandomNumber(23, 25)\n        } else {\n            heal = getRandomNumber(18, 25)\n        }\n        if ((playerHealth + heal) >= 100) {\n            setPreviousPlayerHealth(playerHealth)\n            setPlayerHealth(playerhealth => 100)\n        } else if (playerHealth <= 30) {\n            heal = getRandomNumber(24, 25)\n            setPreviousPlayerHealth(playerHealth)\n            setPlayerHealth(playerHealth => playerHealth + heal)\n        } else {\n            const health = playerHealth + heal;\n            setPreviousPlayerHealth(playerHealth)\n            setPlayerHealth(playerHealth => playerHealth + heal)\n        }\n        console.log(\"player healed for : \" + heal);\n        setHealGif(true)\n        setTimeout(function () {\n            setHealGif(false)\n        }, 2000)\n        setTimeout(function () {\n            computerTurn()\n        }, 2000)\n    }\n\n    const handleSpecialClick = function () {\n        if (playerSpecialUsed === false) {\n            let opponentDamage = 45;\n            let selfDamage = 25;\n            const specialOutcome = [opponentDamage, opponentDamage, selfDamage]\n            const specialNumber = Math.floor(Math.random() * 3);\n            if (specialOutcome[specialNumber] === opponentDamage) {\n                setPreviousComputerHealth(computerHealth)\n                setComputerHealth(computerHealth => computerHealth - opponentDamage);\n                setPlayerSpecialUsed(true);\n                playerDa.specialName = \"Special Used\"\n                console.log(\"player hit computer for : \" + opponentDamage);\n                setTimeout(function () {\n                    computerTurn()\n                }, 2000)\n            } else if (specialOutcome[specialNumber] === selfDamage) {\n                setPreviousPlayerHealth(playerHealth)\n                setPlayerHealth(playerHealth => playerHealth - selfDamage);\n                setPlayerSpecialUsed(true);\n                playerDa.specialName = \"Special Used\"\n                console.log(\"player hit themselves for : \" + selfDamage);\n                setLeftGif(true)\n                setTimeout(function () {\n                    setLeftGif(false)\n                }, 2500)\n                setTimeout(function () {\n                    computerTurn()\n                }, 2000)\n            }\n        } else {\n            return null;\n        }\n    }\n\n    const computerTurn = function () {\n        const Attack1 = function () {\n            let damage = 0;\n            if (computerDa.daType === \"BUFFDA\") {\n                damage = getRandomNumber(18, 30)\n            } else if (computerDa.daType === \"AVERAGEDA\") {\n                damage = getRandomNumber(23, 25)\n            } else {\n                damage = getRandomNumber(18, 25)\n            }\n            setPreviousPlayerHealth(playerHealth)\n            setPlayerHealth(playerHealth => playerHealth - damage)\n            console.log(\"computer hit player for : \" + damage);\n            // checkIfGameFinished();\n            setGif(true)\n            setTimeout(function () {\n                setGif(false)\n            }, 1500)\n        }\n        const Attack2 = function () {\n            let damage = getRandomNumber(10, 35);\n            setPreviousPlayerHealth(playerHealth)\n            setPlayerHealth(playerHealth => playerHealth - damage);\n            console.log(\"computer hit player for : \" + damage);\n            // checkIfGameFinished();\n            setGif(true)\n            setTimeout(function () {\n                setGif(false)\n            }, 1500)\n        }\n        const Heal = function () {\n            let heal = 0;\n            if (computerDa.daType === \"SOFTDA\") {\n                heal = getRandomNumber(23, 25)\n            } else {\n                heal = getRandomNumber(18, 25)\n            }\n            if ((computerHealth + heal) >= 100) {\n                setPreviousComputerHealth(computerHealth)\n                setComputerHealth(computerHealth => 100);\n            } else if (computerHealth <= 30) {\n                heal = getRandomNumber(24, 25)\n                setPreviousComputerHealth(computerHealth)\n                setComputerHealth(computerHealth => computerHealth + heal)\n            } else {\n                setPreviousComputerHealth(computerHealth)\n                setComputerHealth(computerHealth => computerHealth + heal)\n            }\n            console.log(\"computer healed for : \" + heal);\n            setHealGif(true)\n            setTimeout(function () {\n                setHealGif(false)\n            }, 1500)\n        }\n        const Special = function () {\n            let opponentDamage = 45;\n            let selfDamage = 25;\n            const specialOutcome = [opponentDamage, opponentDamage, selfDamage]\n            const specialNumber = Math.floor(Math.random() * 3);\n            if (specialOutcome[specialNumber] === opponentDamage) {\n                setPreviousPlayerHealth(playerHealth)\n                setPlayerHealth(playerHealth => playerHealth - opponentDamage);\n                setComputerSpecialUsed(true);\n                computerDa.specialName = \"Special Used\"\n                console.log(\"computer hit player for : \" + opponentDamage);\n            } else if (specialOutcome[specialNumber] === selfDamage) {\n                setPreviousComputerHealth(computerHealth)\n                setComputerHealth(computerHealth => computerHealth - selfDamage);\n                setComputerSpecialUsed(true);\n                computerDa.specialName = \"Special Used\"\n                console.log(\"computer hit themselves for : \" + selfDamage);\n                setRightGif(true)\n                setTimeout(function () {\n                    setRightGif(false)\n                }, 2500)\n            }\n        }\n        if (computerHealth >= 80) {\n            if (computerSpecialUsed === false) {\n                const randomMove = [Attack1, Attack2, Special]\n                const randomNumber = Math.floor(Math.random() * 3);\n                setTimeout(function () {\n                    randomMove[randomNumber]()\n                }, 1000)\n            } else {\n                const randomMove = [Attack1, Attack2]\n                const randomNumber = Math.floor(Math.random() * 2);\n                setTimeout(function () {\n                    randomMove[randomNumber]()\n                }, 1000)\n            }\n        } else if (computerHealth >= 60) {\n            if (computerSpecialUsed === false) {\n                const randomMove = [Attack1, Attack2, Heal, Special]\n                const randomNumber = Math.floor(Math.random() * 4);\n                setTimeout(function () {\n                    randomMove[randomNumber]()\n                }, 1000)\n            } else {\n                const randomMove = [Attack1, Attack2, Heal]\n                const randomNumber = Math.floor(Math.random() * 3);\n                setTimeout(function () {\n                    randomMove[randomNumber]()\n                }, 1000)\n            }\n        } else if (computerHealth >= 40) {\n            if (computerSpecialUsed === false) {\n                const randomMove = [Attack1, Attack2, Heal, Heal, Special]\n                const randomNumber = Math.floor(Math.random() * 5);\n                setTimeout(function () {\n                    randomMove[randomNumber]()\n                }, 1000)\n            } else {\n                const randomMove = [Attack1, Attack2, Heal, Heal]\n                const randomNumber = Math.floor(Math.random() * 4);\n                setTimeout(function () {\n                    randomMove[randomNumber]()\n                }, 1000)\n            }\n        } else if (computerHealth <= 39) {\n            if (computerSpecialUsed === false) {\n                const randomMove = [Attack1, Attack2, Heal, Heal, Heal, Heal, Special]\n                const randomNumber = Math.floor(Math.random() * 7);\n                setTimeout(function () {\n                    randomMove[randomNumber]()\n                }, 1000)\n            } else {\n                const randomMove = [Attack1, Attack2, Heal, Heal, Heal, Heal]\n                const randomNumber = Math.floor(Math.random() * 6);\n                setTimeout(function () {\n                    randomMove[randomNumber]()\n                }, 1000)\n            }\n        }\n    };\n\n    const showGifLeft = function () {\n        const daImg2 = \"left2.gif\"\n        const daImg3 = \"left3.gif\"\n        const randomDaImg = [daImg2, daImg3]\n        const randomNumber = Math.floor(Math.random() * 2);\n        const img = randomDaImg[randomNumber]\n        return <img src={`${process.env.PUBLIC_URL}/${img}`} alt=\"fist\" height=\"200px\" width=\"200px\" />\n    }\n\n    const showGifRight = function () {\n        const daImg1 = \"right1.gif\"\n        const daImg2 = \"right2.gif\"\n        const daImg3 = \"right3.gif\"\n        const randomDaImg = [daImg1, daImg2, daImg3]\n        const randomNumber = Math.floor(Math.random() * 3);\n        const img = randomDaImg[randomNumber]\n        return <img src={`${process.env.PUBLIC_URL}/${img}`} alt=\"fist\" height=\"200px\" width=\"200px\" />\n    }\n\n    const showFist = function () {\n        return <img src={`${process.env.PUBLIC_URL}/fist.gif`} alt=\"fist\" height=\"100px\" width=\"100px\" />\n\n    }\n\n    const showHeal = function () {\n        return <img src={`${process.env.PUBLIC_URL}/icegif-1029.gif`} alt=\"fist\" height=\"100px\" width=\"100px\" />\n    }\n\n\n    if (gameFinished === false) {\n        return (\n            <div className=\"fight_bg\">\n                {das.length < 2 ?\n                    <div>\n                        <h1 className=\"health\">FINAL ROUND</h1>\n                    </div>\n                    :\n                    <div></div>}\n                <div>\n                    <img className=\"DaFightImg\" src={`${process.env.PUBLIC_URL}/${playerDa.imgName}`} width=\"200\" height=\"200\" />\n                    <ul className = \"DaDetails\">\n                        <li className=\"name\">{playerDa.name}</li>\n                        <li className=\"bio\">{playerDa.bio}</li>\n                        <li className=\"attack1\">{playerDa.attackOneName}...  <button onClick={handleAttack1Click}>ATTACK</button></li>\n                        <li className=\"attack2\">{playerDa.attackTwoName}...  <button onClick={handleAttack2Click}>ATTACK</button></li>\n                        <li className=\"heal\">{playerDa.healName}...  <button onClick={handleHealClick}>HEAL</button></li>\n                    </ul>\n                    {previousPlayerHealth > playerHealth ?\n                        <CountUp\n                            className=\"countUpRed\"\n                            start={previousPlayerHealth}\n                            end={playerHealth}\n                            duration=\"1\"\n                        /> :\n                        <CountUp\n                            className=\"countUpGreen\"\n                            start={previousPlayerHealth}\n                            end={playerHealth}\n                            duration=\"1\"\n                        />}\n                </div>\n                {leftGif === true ? showGifLeft() : null}\n                {rightGif === true ? showGifRight() : null}\n                {healGif === true ? showHeal() : null}\n                {gif === true ? showFist() : null}\n                <div>\n                    <img src={`${process.env.PUBLIC_URL}/${computerDa.imgName}`} alt=\"da-fighter\" width=\"220\" height=\"250\" />\n                    <ul>\n                        <li className=\"CPUName\">{computerDa.name}</li>\n                        <li className=\"CPUBio\">{computerDa.bio}</li>\n                        <li className=\"CPUAttack1\">{computerDa.attackOneName}...  <button>ATTACK</button></li>\n                        <li className=\"CPUAttack2\">{computerDa.attackTwoName}...  <button>ATTACK</button></li>\n                        <li className=\"CPUHeal\">{computerDa.healName}...  <button>HEAL</button></li>\n                    </ul>\n\n                    {previousComputerHealth > computerHealth ?\n                        <CountUp\n                            className=\"countUpRed\"\n                            start={previousComputerHealth}\n                            end={computerHealth}\n                            duration=\"1\"\n                        /> :\n                        <CountUp\n                            className=\"countUpGreen\"\n                            start={previousComputerHealth}\n                            end={computerHealth}\n                            duration=\"1\"\n                        />}\n                </div>\n                 </div>\n        )\n    } else {\n        if (computerHealth <= 0) {\n            return (\n                <>\n                    <div className=\"health\">\n                        <h1>{playerDa.name} smashed {computerDa.name}</h1>\n                        <h2>You Win !</h2>\n                    </div>\n                </>\n            )\n        } else {\n            return (\n                <>\n                    <div className=\"health\">\n                        <h1>{computerDa.name} wrecked {playerDa.name}</h1>\n                        <h2>You Lose !</h2>\n                    </div>\n                    </>\n            )\n        }\n    }\n}\n\nexport default FightScreen;","/Users/morven/Desktop/G27/codeclan_work/java_project/front-end-da-fighters/java-project-da-fighters-frontend/src/components/DaList.js",["86","87"],"import React from 'react';\nimport Da from './Da';\nimport { Link } from 'react-router-dom';\nimport '../App.css'\n\nconst DaList = ({ das, onDaClicked }) => {\n\n\tconst dasNodes = das.map((da, index) => {\n\t\treturn (\n\t\t\t<li key={index} >\n\t\t\t\t<Da da={da} key={index} onDaClicked={onDaClicked}/>\n\t\t\t</li>\n\t\t)\n\t})\n\n\treturn (\n\t\t<div >\n\t\t<Link to=\"/\"> <img className=\"home_button\" src={`${process.env.PUBLIC_URL}/logo.png`}></img> </Link>\n\t\t<ul className = \"flex-container\">\n\t\t\t{dasNodes}\n\t\t</ul>\n\t\t<Link to=\"/fight\"> <img className=\"fight_button\" src={`${process.env.PUBLIC_URL}/SquareGo.png`}></img> </Link>\n\t\t</div>\n\t)\n}\nexport default DaList;","/Users/morven/Desktop/G27/codeclan_work/java_project/front-end-da-fighters/java-project-da-fighters-frontend/src/components/ScoreboardPoints.js",[],"/Users/morven/Desktop/G27/codeclan_work/java_project/front-end-da-fighters/java-project-da-fighters-frontend/src/components/ScoreboardDa.js",[],"/Users/morven/Desktop/G27/codeclan_work/java_project/front-end-da-fighters/java-project-da-fighters-frontend/src/components/Da.js",["88"],"import React from 'react';\nimport '../App.css'\n\nconst Da = ({ da, onDaClicked }) => {\n  \n\n  const handleClick = function(){\n    onDaClicked(da)\n  }\n\n  return (\n    <>\n    <div >\n      <img className = \"flex-item\" src={`${process.env.PUBLIC_URL}/${da.imgName}`} onClick={handleClick}/>\n      </div>\n    </>\n   \n  )\n}\n\nexport default Da;",{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":35,"column":6,"nodeType":"95","endLine":35,"endColumn":16,"suggestions":"96"},{"ruleId":"97","severity":1,"message":"98","line":111,"column":19,"nodeType":"99","messageId":"100","endLine":111,"endColumn":21},{"ruleId":"97","severity":1,"message":"101","line":3,"column":8,"nodeType":"99","messageId":"100","endLine":3,"endColumn":20},{"ruleId":"97","severity":1,"message":"102","line":46,"column":12,"nodeType":"99","messageId":"100","endLine":46,"endColumn":22},{"ruleId":"103","severity":1,"message":"104","line":51,"column":12,"nodeType":"105","endLine":51,"endColumn":126},{"ruleId":"97","severity":1,"message":"106","line":8,"column":21,"nodeType":"99","messageId":"100","endLine":8,"endColumn":31},{"ruleId":"97","severity":1,"message":"107","line":14,"column":26,"nodeType":"99","messageId":"100","endLine":14,"endColumn":41},{"ruleId":"93","severity":1,"message":"108","line":26,"column":8,"nodeType":"95","endLine":26,"endColumn":38,"suggestions":"109"},{"ruleId":"97","severity":1,"message":"110","line":84,"column":19,"nodeType":"99","messageId":"100","endLine":84,"endColumn":25},{"ruleId":"97","severity":1,"message":"111","line":98,"column":11,"nodeType":"99","messageId":"100","endLine":98,"endColumn":29},{"ruleId":"103","severity":1,"message":"104","line":307,"column":21,"nodeType":"105","endLine":307,"endColumn":130},{"ruleId":"103","severity":1,"message":"104","line":18,"column":17,"nodeType":"105","endLine":18,"endColumn":89},{"ruleId":"103","severity":1,"message":"104","line":22,"column":22,"nodeType":"105","endLine":22,"endColumn":99},{"ruleId":"103","severity":1,"message":"104","line":14,"column":7,"nodeType":"105","endLine":14,"endColumn":107},"no-native-reassign",["112"],"no-negated-in-lhs",["113"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'selectComputerDa'. Either include it or remove the dependency array.","ArrayExpression",["114"],"no-unused-vars","'da' is assigned a value but never used.","Identifier","unusedVar","'FinishScreen' is defined but never used.","'lightening' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'setStateDa' is assigned a value but never used.","'setGameFinished' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'computerDa', 'onGameFinished', and 'playerDa'. Either include them or remove the dependency array. If 'onGameFinished' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["115"],"'health' is assigned a value but never used.","'handleSpecialClick' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},"Update the dependencies array to be: [playerDa, selectComputerDa]",{"range":"120","text":"121"},"Update the dependencies array to be: [computerDa, computerHealth, onGameFinished, playerDa, playerHealth]",{"range":"122","text":"123"},[1028,1038],"[playerDa, selectComputerDa]",[1091,1121],"[computerDa, computerHealth, onGameFinished, playerDa, playerHealth]"]